/*#-
This template file is distributed under the MIT License. See LICENSE.md for details.
#*/

/*( generation_notice )*/

#include "../common.h"
#include "../functions.h"

/* LFSR generator */

static uint64_t lfsr = /*( lfsr_seed )*/;
uint64_t get_next_lfsr(uint32_t iteration_count) {
  for (uint32_t iteration = 0; iteration < iteration_count; ++iteration)
    lfsr = (lfsr >> 1) | ((((lfsr >> 1) ^ (lfsr >> 2)) & 1) << 63);
  return lfsr;
}

_Static_assert(sizeof(uint8_t) == 1, "A type with size == 1 is required.");
static __attribute((used)) uint8_t randomized_state[/*( generated_byte_count )*/];
void regenerate_state(void) {
  for (uint32_t counter = 0; counter < /*( generated_byte_count )*/; ++counter)
    randomized_state[counter] = (uint8_t) get_next_lfsr(8);
}

static char *register_list[/*( register_count )*/] = {
  /*{ for register in register_list -}*/
  /*( "\"" + register + "\"" -)*/
  /*{- if not loop.last -}*/ , /*{ endif -}*/
  /*{- endfor }*/
};

void print_current_state(void) {
  /* Dump registers */
  puts("  - Registers:");
  for (uint32_t index = 0; index < /*( register_count )*/; ++index) {
    typedef uint8_t single_word[/*( register_size )*/];
    single_word *word_ptr = (single_word *) (randomized_state + index * /*( register_size )*/);
    MAKE_PRINT_HELPER(/*( register_type )*/, word_ptr, word_printing_helper);

    printf("      - Name: \"%s\"\n        Value: 0x%0/*( register_size * 2 )*/zx\n",
           register_list[index],
           word_printing_helper->v);
    printf("        Bytes: ");
    PRINT_BYTES(/*( register_type )*/, word_printing_helper);
  }
  
  /* Dump Stack */
  printf("    Stack: ");
  typedef uint8_t stack_state[/*( stack_byte_count )*/];
  stack_state *state_ptr = (stack_state *) (randomized_state + /*( register_count * register_size )*/);
  MAKE_PRINT_HELPER(stack_state, state_ptr, stack_printing_helper);
  PRINT_BYTES(stack_state, stack_printing_helper);
}

static jmp_buf jump_buffer;

/*{ for name, arguments in argument_functions.items() -}*/
void describe_/*( name )*/(void) {
  if (setjmp(jump_buffer) == 0) {
    regenerate_state();
    print_current_state();

    __asm__(
      /*( fill_stack_with_random_data )*/
      /*( fill_registers_with_random_data )*/
      /*( call_a_function(name) )*/
      /*( restore_stack )*/
    );

    longjmp(jump_buffer, 1); 
  }
}

/*{ endfor }*/

#if defined(__APPLE__) || defined(__MINGW32__)
#define FUNCTION_NAME_PREFIX "_"
#else
#define FUNCTION_NAME_PREFIX
#endif

__asm__ ( /* Define the return value setup function */
  ".globl " FUNCTION_NAME_PREFIX "set_return_value_up\n"
  FUNCTION_NAME_PREFIX "set_return_value_up:\n"
      /*( save_return_address )*/
      /*( call_a_function("regenerate_state") )*/
      /*( call_a_function("print_current_state") )*/
      /*( fill_stack_with_random_data )*/
      /*( fill_registers_with_random_data )*/
      /*( restore_return_address )*/
      /*( return_from_function )*/
);

static size_t runtime_endianness_check() {
  size_t i = 1;
  return !*((uint8_t *) &i);
}

int main(void) {
  puts("---");

#ifdef TARGET_x86_64
  puts("TargetArchitecture: x86_64");
#elif TARGET_i386
  puts("TargetArchitecture: i386");
#elif TARGET_aarch64
  puts("TargetArchitecture: aarch64");
#elif TARGET_arm
  puts("TargetArchitecture: arm");
#else
  puts("TargetArchitecture: UNSUPPORTED");
  _Static_assert(0, "unsupported platform architecture");
#endif

#ifdef ENDIANNESS_LITTLE
  assert(!runtime_endianness_check() && "little endianness expected!");
  puts("IsLittleEndian: yes");
#elif defined(ENDIANNESS_BIG)
  assert(runtime_endianness_check() && "big endianness expected!");
  puts("IsLittleEndian: no");
#endif

  puts("Iterations:");
  for (uint32_t index = 0; index < /*( iteration_count )*/; ++index) {
    /*{ for function_name, arguments in argument_functions.items() -}*/
      describe_/*( function_name )*/();
    /*{ endfor -}*/
    /*{ for function_name, arguments in return_value_functions.items() -}*/
      /*( function_name )*/();
    /*{ endfor }*/
  }

  puts("...");
  return 0;
}
