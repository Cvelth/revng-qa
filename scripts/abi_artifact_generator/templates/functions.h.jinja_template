#pragma once
/*( _ )*/

/*#-
This template file is distributed under the MIT License. See LICENSE.md for details.
#*/

/*(- generation_notice )*/

#include <stddef.h>
#include <stdint.h>

#include "abi.h"

/*
 * Define a `NOINLINE` specifier
 */
#ifdef _MSC_VER
#define NOINLINE __declspec(noinline)
#else
#define NOINLINE __attribute__((noinline))
#endif

/*
 * Avoid problems on architectures without __int128_t support
 */
#ifdef __SIZEOF_INT128__
#define INT128_T __int128_t
#define UINT128_T __uint128_t
#else
typedef struct {
  int64_t low, high;
} replacement_for___int128_t;
#define INT128_T replacement_for___int128_t

typedef struct {
  uint64_t low, high;
} replacement_for___uint128_t;
#define UINT128_T replacement_for___uint128_t
#endif

/*
 * Helper structs used by the functions
 */

/*{ for name, fields in structs.items() -}*/
typedef struct {
/*{ for field in fields -}*/
  /*( field | indent(2, true) )*/;
/*{ endfor -}*/
} /*( name )*/;

/*{ endfor -}*/

// There's a slight difference in the way this pragma impacts the structs
// between msvc and gcc, but it shouldn't be relevant in our case: since all
// we care about is that these structs are emitted as "unnaturally aligned",
// without any regard to their specific size.
#pragma pack(push, 1)

/*{ for name, fields in packed_structs.items() -}*/
typedef struct {
/*{ for field in fields -}*/
  /*( field | indent(2, true) )*/;
/*{ endfor -}*/
} /*( name )*/;

/*{ endfor -}*/
#pragma pack(pop)

/*
 * Functions designed to test argument passing
 */

/*{ for name, arguments in argument_functions.items() -}*/
void setup_/*( name )*/(void);
NOINLINE void ABIDEF test_/*( name )*/(
  /*{- for type in arguments -}*/
  /*( type )*/ argument_/*( loop.index - 1 )*/
  /*{- if not loop.last -}*/ , /*{ endif -}*/
  /*{- endfor -}*/
);
/*{ endfor }*/
/*
 * Functions designed to test value returning
 */

/*{ for name, return_value_type in return_value_functions.items() -}*/
void setup_/*( name )*/(void);
NOINLINE /*( return_value_type )*/ ABIDEF test_/*( name )*/(void);
/*{ endfor }*/
