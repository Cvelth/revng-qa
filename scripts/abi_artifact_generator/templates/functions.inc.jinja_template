/*#-
This template file is distributed under the MIT License. See LICENSE.md for details.
#*/

/*(- generation_notice )*/

#ifndef _MSC_VER
#include <stdalign.h>
#endif

#include <stddef.h>

#include "common.h"
#include "functions.h"
#include "types.h"

/*
 * Functions designed to test argument passing
 */

// Stores the values (or pointers to, depending on the type) of all
// the arguments at specially dedicated `printable_locations`, so that they
// can be dumped later on.
#define SAVE_ARGUMENT_VALUE(TYPE, NAME)                                        \
  do {                                                                         \
    if (sizeof(TYPE) <= ARGUMENT_SIZE_LIMIT(TYPE, NAME) && !IS_PACKED(TYPE)) { \
      /* If the argument is passed by value, copy the value out, */            \
      *(TYPE *) (printable_locations[0].bytes + current_offset) = NAME;        \
      current_offset += sizeof(TYPE);                                          \
    } else {                                                                   \
      /* Otherwise copy the pointer to it. */                                  \
      *(TYPE **) (printable_locations[0].bytes + current_offset) = &NAME;      \
      current_offset += sizeof(TYPE *);                                        \
    }                                                                          \
  } while (0)

/*{ for name, arguments in argument_functions.items() -}*/
NOINLINE void ABIDEF test_/*( name )*/(
  /*{- for type in arguments -}*/
  /*( type )*/ argument_/*( loop.index - 1 )*/
  /*{- if not loop.last -}*/ , /*{ endif -}*/
  /*{- endfor -}*/
) {
  current_offset = 0;

  /*{- for type in arguments }*/
  SAVE_ARGUMENT_VALUE(/*( type )*/, argument_/*( loop.index - 1 )*/);
  /*{- endfor }*/
}

/*{ endfor -}*/

/*
 * Functions designed to test value returning
 */

void put_current_cpu_state_into_the_printable_location_0(void);

/*{ for name, return_value_type in return_value_functions.items() -}*/
NOINLINE /*( return_value_type )*/ ABIDEF test_/*( name )*/(void) {
  put_current_cpu_state_into_the_printable_location_0();

  typedef /*( return_value_type )*/ return_value_type;
  return_value_type returned = *(return_value_type *) randomized_state.bytes;
  return returned;
}

/*{ endfor }*/
