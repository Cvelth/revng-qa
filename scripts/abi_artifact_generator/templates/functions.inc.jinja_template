/*#-
This template file is distributed under the MIT License. See LICENSE.md for details.
#*/

/*(- generation_notice )*/

/**
 * Provides the bodies of all the `test_{{ TEST_NAME }}` functions.
 */

#ifndef _MSC_VER
#include <stdalign.h>
#endif

#include <stddef.h>

#include "common.h"
#include "functions.h"

/*
 * Functions designed to test argument passing
 */

// Temporary locations to store data that needs to be preserved across a test.
extern uint8_t expected_state[];
extern uint8_t value_dumps[];
extern uint64_t size_dumps[];
extern uint64_t address_dumps[];

/*{ for name, arguments in argument_functions.items() -}*/
NOINLINE void ABIDEF test_/*( name )*/(
  /*{- for type in arguments -}*/
  /*( type )*/ argument_/*( loop.index - 1 )*/
  /*{- if not loop.last -}*/ , /*{ endif -}*/
  /*{- endfor -}*/
) {
  _Static_assert(/*( arguments | length )*/ < /*( maximum_argument_count )*/,
                 "Number of arguments exceeds the allowed maximum.");

  uint64_t current_offset = 0;
  /*{- for type in arguments }*/
  address_dumps[/*( loop.index - 1 )*/] = (uint64_t) (size_t) &argument_/*( loop.index - 1 )*/;
  *(/*( type )*/ *) (value_dumps + current_offset) = argument_/*( loop.index - 1 )*/;
  current_offset += sizeof(/*( type )*/);
  /*{- endfor }*/
}

/*{ endfor -}*/

/*
 * Functions designed to test value returning
 */

/*{ for name, return_value_type in return_value_functions.items() -}*/
NOINLINE /*( return_value_type )*/ ABIDEF test_/*( name )*/(void) {
  size_dumps[0] = sizeof(/*( return_value_type )*/);
  _Static_assert(sizeof(/*( return_value_type )*/) <= /*( maximum_argument_size )*/,
                 "Size of the return value exceeds the allowed maximum.");
  /*( return_value_type )*/ returned = *(/*( return_value_type )*/ *) expected_state;

  // MSVC works better when return value address is dumped _before_ the return,
  // so do it here, while for GCC do it _after_ the return.
#ifdef _MSC_VER
  // Write the pointer to the received values into a safe location,
  address_dumps[0] = (uint64_t) (size_t) &returned;
#endif
  return returned;
}

/*{ endfor -}*/

#ifdef PREVENT_TESTS_FROM_BEING_REMOVED_BY_THE_LINKER
/*{ for name, arguments in argument_functions.items() -}*/
void (ABIDEF *test_/*( name )*/_pointer)(
  /*{- for type in arguments -}*/
  /*( type )*/
  /*{- if not loop.last -}*/ , /*{ endif -}*/
  /*{- endfor -}*/
) = &test_/*( name )*/;
/*{ endfor }*/
/*{ for name, return_value_type in return_value_functions.items() -}*/
/*( return_value_type )*/(ABIDEF *test_/*( name )*/_pointer)(void) = &test_/*( name )*/;
/*{ endfor -}*/
#endif
