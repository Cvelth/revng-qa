/*#-
This template file is distributed under the MIT License. See LICENSE.md for details.
#*/

/*(- generation_notice )*/

#ifndef _MSC_VER
#include <stdalign.h>
#endif

#include <stddef.h>

#include "common.h"
#include "functions.h"
#include "types.h"

/*
 * Functions designed to test argument passing
 */

/*{ for name, arguments in argument_functions.items() -}*/
NOINLINE void ABIDEF test_/*( name )*/(
  /*{- for type in arguments -}*/
  /*( type )*/ argument_/*( loop.index - 1 )*/
  /*{- if not loop.last -}*/ , /*{ endif -}*/
  /*{- endfor -}*/
) {
  current_offset = 0;

  /*{- for type in arguments }*/
  if (sizeof(/*( type )*/) <= ARGUMENT_SIZE_LIMIT(/*( type )*/, argument_/*( loop.index - 1 )*/) && !IS_PACKED(/*( type )*/)) {
    *(/*( type )*/ *) ((uint8_t *) printable_location + current_offset) = argument_/*( loop.index - 1 )*/;
    current_offset += sizeof(/*( type )*/);
  } else {
    *(/*( type )*/ **) ((uint8_t *) printable_location + current_offset) = &argument_/*( loop.index - 1 )*/;
    current_offset += sizeof(/*( type )*/ *);
  }
/*{ endfor -}*/
}

/*{ endfor }*/

/*
 * Functions designed to test value returning
 */

/* Helps avoiding compiler warnings */
void *typeless_setup = (void *) set_return_value_up;

#ifdef _MSC_VER
#pragma warning(disable: 4700) // uninitialized local variable used
#pragma warning(disable: 4715) // not all control paths return a value
#endif

static jmp_buf jump_buffer;
/*{ for name, return_value_type in return_value_functions.items() -}*/
NOINLINE /*( return_value_type )*/ ABIDEF test_/*( name )*/(void) {
  if (setjmp(jump_buffer) == 0) {
    /*( return_value_type )*/ return_value;
    if (sizeof(return_value) <= RETURN_VALUE_SIZE_LIMIT(/*( return_value_type )*/, return_value) && !IS_PACKED(/*( return_value_type )*/)) {
      return_value = ((/*(- return_value_type )*/(ABIDEF *)(size_t)) typeless_setup)(0);
      *(/*( return_value_type )*/ *) printable_location = return_value;
    } else {
      /*( return_value_type )*/ *return_value_pointer = ((/*(- return_value_type )*/ *(ABIDEF *)(void)) typeless_setup)();
      *(/*( return_value_type )*/ **) printable_location = return_value_pointer;
    }

    restore_stack_pointer();
    longjmp(jump_buffer, 1);
  }
}

/*{ endfor -}*/

/*
 * Functions designed to test passing of the return value location
 */

/*{ for name, return_value_type in return_value_functions.items() -}*/
NOINLINE /*( return_value_type )*/ ABIDEF test_/*( name )*/_location(void) {
#if defined(_MSC_VER) || defined(TARGET_AArch64) || defined(TARGET_arm)
  /* default construct the return value */
  /*( return_value_type )*/ Result;
  return Result;
#else
  /* do nothing */
#endif
}

/*{ endfor }*/
