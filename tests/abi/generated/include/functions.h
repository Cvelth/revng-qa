#pragma once

/*
 * This file was autogenerated. DO NOT MODIFY!
 * It is distributed under the MIT License. See LICENSE.md for details.
 */

#include <stdint.h>

/*
 * Define an empty `ABIDEF` if it's undefined
 */
#ifndef ABIDEF
#define ABIDEF
#endif

/*
 * Avoid problems on architectures without __int128_t support
 */
#ifdef __SIZEOF_INT128__
#define INT128_T __int128_t
#define UINT128_T __uint128_t
#else
typedef struct {
  int64_t low, high;
} replacement_for___int128_t;
#define INT128_T replacement_for___int128_t

typedef struct {
  uint64_t low, high;
} replacement_for___uint128_t;
#define UINT128_T replacement_for___uint128_t
#endif

/*
 * Helper structs used by the functions
 */

typedef struct {
  uint16_t a;
  uint16_t b;
} small_struct;

typedef struct {
  uint8_t a;
  uint16_t b;
} padded_struct;

typedef struct {
  uint32_t a[3];
} array_struct;

typedef struct {
  uint32_t a[3];
  uint64_t b[3];
} two_arrays_struct;

typedef struct {
  uint64_t a[8];
} big_struct;

typedef struct {
  uint64_t a[32];
} huge_struct;

/*
 * Functions designed to test argument passing
 */

void __attribute__((noinline, weak)) ABIDEF single_8_bit_argument(uint8_t argument_0);
void __attribute__((noinline, weak)) ABIDEF single_16_bit_argument(int16_t argument_0);
void __attribute__((noinline, weak)) ABIDEF single_32_bit_argument(uint32_t argument_0);
void __attribute__((noinline, weak)) ABIDEF single_64_bit_argument(int64_t argument_0);
void __attribute__((noinline, weak)) ABIDEF single_128_bit_argument(INT128_T argument_0);
void __attribute__((noinline, weak)) ABIDEF single_small_struct_argument(small_struct argument_0);
void __attribute__((noinline, weak)) ABIDEF single_padded_struct_argument(padded_struct argument_0);
void __attribute__((noinline, weak)) ABIDEF single_array_struct_argument(array_struct argument_0);
void __attribute__((noinline, weak)) ABIDEF single_two_arrays_struct_argument(two_arrays_struct argument_0);
void __attribute__((noinline, weak)) ABIDEF single_big_struct_argument(big_struct argument_0);
void __attribute__((noinline, weak)) ABIDEF single_huge_struct_argument(huge_struct argument_0);
void __attribute__((noinline, weak)) ABIDEF single_void_pointer_argument(void * argument_0);
void __attribute__((noinline, weak)) ABIDEF single_int_pointer_argument(uint32_t * argument_0);
void __attribute__((noinline, weak)) ABIDEF single_struct_pointer_argument(huge_struct * argument_0);
void __attribute__((noinline, weak)) ABIDEF mixed_integer_arguments(int64_t argument_0, uint32_t argument_1, int16_t argument_2, uint8_t argument_3, UINT128_T argument_4);
void __attribute__((noinline, weak)) ABIDEF mixed_int_struct_arguments(int64_t argument_0, padded_struct argument_1, int16_t argument_2, big_struct argument_3, INT128_T argument_4);
void __attribute__((noinline, weak)) ABIDEF mixed_int_struct_pointer_arguments(padded_struct * argument_0, padded_struct argument_1, UINT128_T * argument_2, huge_struct argument_3, void * argument_4);
void __attribute__((noinline, weak)) ABIDEF six_register_test(array_struct argument_0, INT128_T argument_1, array_struct argument_2);
void __attribute__((noinline, weak)) ABIDEF multiple_stack_arguments(big_struct argument_0, big_struct argument_1, big_struct argument_2);
void __attribute__((noinline, weak)) ABIDEF lots_of_arguments(uint8_t argument_0, uint8_t argument_1, uint8_t argument_2, uint8_t argument_3, uint8_t argument_4, uint8_t argument_5, uint8_t argument_6, uint8_t argument_7, uint8_t argument_8, uint8_t argument_9, uint8_t argument_10, uint8_t argument_11, uint8_t argument_12, uint8_t argument_13, uint8_t argument_14, uint8_t argument_15, uint8_t argument_16, uint8_t argument_17, uint8_t argument_18, uint8_t argument_19, uint8_t argument_20, uint8_t argument_21, uint8_t argument_22);
void __attribute__((noinline, weak)) ABIDEF equivalence_test_0(small_struct * argument_0, small_struct argument_1, uint64_t argument_2);
void __attribute__((noinline, weak)) ABIDEF equivalence_test_64_bit_1(uint64_t argument_0, uint32_t argument_1, uint64_t argument_2);
void __attribute__((noinline, weak)) ABIDEF equivalence_test_64_bit_2(uint64_t argument_0, uint16_t argument_1, uint16_t argument_2, uint64_t argument_3);
void __attribute__((noinline, weak)) ABIDEF equivalence_test_32_bit_1(uint32_t argument_0, uint32_t argument_1, uint64_t argument_2);
void __attribute__((noinline, weak)) ABIDEF equivalence_test_32_bit_2(uint32_t argument_0, uint16_t argument_1, uint16_t argument_2, uint64_t argument_3);

/*
 * Functions designed to test value returning
 */

uint8_t __attribute__((noinline)) single_8_bit_return_value(void);
int16_t __attribute__((noinline)) single_16_bit_return_value(void);
uint32_t __attribute__((noinline)) single_32_bit_return_value(void);
int64_t __attribute__((noinline)) single_64_bit_return_value(void);
UINT128_T __attribute__((noinline)) single_128_bit_return_value(void);
small_struct __attribute__((noinline)) single_small_struct_return_value(void);
padded_struct __attribute__((noinline)) single_padded_struct_return_value(void);
void * __attribute__((noinline)) single_void_pointer_return_value(void);
uint32_t * __attribute__((noinline)) single_int_pointer_return_value(void);
huge_struct * __attribute__((noinline)) single_struct_pointer_return_value(void);

ABIDEF void *set_return_value_up(void);
